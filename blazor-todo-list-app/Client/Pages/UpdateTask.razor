@page "/updatetodo"
@using Newtonsoft.Json
@inject HttpClient Http
@inject IModalService Modal



<div class="modal-body">
    <form @onsubmit="UpdateTodoAsync">
        <div class="form-group">
            <label for="taskName">Görev Adı</label>
            <input type="text" class="form-control" id="taskName" @bind="@task.TaskName" required />
        </div>
        <div class="form-group">
            <label for="description">Açıklama</label>
            <textarea class="form-control" id="description" @bind="@task.Description" required></textarea>
        </div>
        <div class="form-group">
            <label for="priority">Öncelik</label>
            <select class="form-control" id="priority" @bind="@task.Priority">
                <option value="Low">Düşük</option>
                <option value="Medium">Orta</option>
                <option value="High">Yüksek</option>
            </select>
        </div>
        <button type="submit" class="btn btn-primary">Görev Güncelle</button>
    </form>
</div>



@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    [Parameter]
    public int selectedId { get; set; }

    private Task_ task = new Task_();

    protected override async Task OnInitializedAsync()
    {
        task = await FetchTaskById(selectedId);
    }

    private async Task UpdateTodoAsync()
    {
        task.UserId = 1; //NOT GOOD.
        task.CreatedDate_ = DateTime.Now;

        var response = await Http.PutAsJsonAsync($"https://localhost:7000/api/todo/UpdateTodo/{task.Id}", task);

        if (response.IsSuccessStatusCode)
        {
            await ModalInstance.CloseAsync();
            var options = new ModalOptions
                {
                    HideCloseButton = true,
                    DisableBackgroundCancel = true,
                    Animation = ModalAnimation.FadeIn(1)
                };
              
            var modalRef = Modal.Show<SuccessMessage>("Güncelleme Başarılı", options);
            await Task.Delay(3000);
            modalRef.Close();
        }
        else
        {
            var options = new ModalOptions
                {
                    HideCloseButton = true,
                    DisableBackgroundCancel = true,
                    Animation = ModalAnimation.FadeIn(1)
                };

            var modalRef = Modal.Show<ErrorMessage>("Güncelleme Başarısız", options);
            await Task.Delay(3000);
            modalRef.Close();
        }
    }

    private async Task<Task_> FetchTaskById(int taskId)
    {
        try
        {
            var response = await Http.GetAsync($"https://localhost:7000/api/todo/GetTodoById/{taskId}");

            if (!response.IsSuccessStatusCode)
            {
                Modal.Show<ErrorMessage>("Sunucudan veri alınamadı.");
                return null;
            }

            var responseContent = await response.Content.ReadAsStringAsync();
            var result = JsonConvert.DeserializeObject<Task_>(responseContent);

            if (result == null)
            {
                Modal.Show<ErrorMessage>("Sunucudan veri gelmedi.");
                return null;
            }

            return result;
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"JSON Error: {ex.Message}");
            Modal.Show<ErrorMessage>("Sunucu yanıtı parse edilemedi.");
            return null;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Unexpected Error: {ex.Message}");
            Modal.Show<ErrorMessage>("Beklenmeyen bir hata oluştu.");
            return null;
        }
    }

}
